# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - main
stages:
  - stage: InstallDependencies
    jobs:
      - job: Install
        pool:
          name: Default
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'
            displayName: 'Install Node.js'
          - script: |
              npm install -g yarn
              yarn install
            displayName: 'Install yarn dependencies'
          - script: |
              dir
              echo "Checking if android directory exists..."
              if exist android (
                cd android
                dir
              ) else (
                echo "android directory not found!"
              )
            displayName: 'Check directory structure'
  - stage: BuildAndroid
    displayName: "Build Android App"
    dependsOn: InstallDependencies
    jobs:
      - job: AndroidBuild
        pool:
          name: Default
        steps:
          - script: |
              dir
              echo "Checking if android directory exists..."
              if exist android (
                cd android
                dir
                if not exist gradlew (
                  echo "gradlew not found, attempting to generate wrapper..."
                  gradle wrapper
                )
              ) else (
                echo "android directory not found!"
              )
            displayName: 'Verify Android directory and gradlew'
          - script: |
              cd android
              if exist gradlew (
                echo "Setting permissions for gradlew..."
                attrib -R gradlew
              )
            displayName: 'Set gradlew permissions'
          - task: Gradle@3
            inputs:
              workingDirectory: '$(Build.SourcesDirectory)/android'
              gradleWrapperFile: '$(Build.SourcesDirectory)/android/gradlew'
              gradleOptions: '-Xmx3072m'
              tasks: 'assembleRelease'
            displayName: 'Assemble Android APK'
            condition: succeededOrFailed()
          - task: CopyFiles@2
            inputs:
              contents: '**/*.apk'
              targetFolder: '$(Build.ArtifactStagingDirectory)/apk'
            displayName: 'Copy APKs to staging'
            condition: succeededOrFailed()
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)/apk'
              artifactName: 'Android_APK'
            displayName: 'Publish APK artifact'
            condition: succeededOrFailed()

  # - stage: BuildiOS
  #   displayName: "Build iOS App"
  #   dependsOn: InstallDependencies
  #   jobs:
  #     - job: iOSBuild
  #       pool:
  #         name: 'YourMacAgentPool'  # Replace with your self-hosted macOS agent pool
  #       steps:
  #         - script: |
  #             cd ios
  #             pod install
  #           displayName: 'Install CocoaPods'

  #         - task: Xcode@5
  #           inputs:
  #             actions: 'build'
  #             scheme: 'YourAppScheme'  # Replace with your Xcode scheme
  #             sdk: 'iphoneos'
  #             configuration: 'Release'
  #             xcWorkspacePath: 'ios/YourApp.xcworkspace'
  #             signingOption: 'manual'
  #             signingIdentity: '$(SIGNING_IDENTITY)'
  #             provisioningProfileUuid: '$(PROVISIONING_PROFILE_UUID)'
  #           displayName: 'Build iOS App'

  #         - task: PublishBuildArtifacts@1
  #           inputs:
  #             pathToPublish: 'ios/build'
  #             artifactName: 'iOS_App'
  #           displayName: 'Publish iOS artifact'
